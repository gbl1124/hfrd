def createQueueIdFile(name, id, target) {
  path = "http://localhost:8080/job/"+name+"/"+id+"/api/json?tree=queueId"
  try {
    response = httpRequest path
    props = readJSON text: response.content
    queueId = props.queueId
    sh """
      echo -n "${queueId}" > "${target}"
    """
  } catch (Exception e) {
    println("Can not create the job queueId file.")
  }
}

def getCurrentTime() {
  currentTime = sh (
    script: 'date "+%Y%m%dT%H%M%S"',
    returnStdout: true
  ).trim()
  return currentTime
}

def getScript(workdir, scriptpath, repourl) {
  dir(workdir) {
    sh """
      git init hfrd
      cd hfrd
      git remote add origin ${repourl}
      git config core.sparsecheckout true
      echo ${scriptpath} >> .git/info/sparse-checkout
      git pull --depth=1 origin master
      mv ${scriptpath} ${workdir}
    """
  }
}

def runScript(execdir, scriptpath) {
  dir(execdir) {
    if (fileExists("kubeconfig")) {
      sh """
        ${scriptpath}
      """
    } else {
      println("No kubeconfig found, cannot do cluster cleanups")
    }
  }
}

node {

  deleteDir()

  parameters {[
    string(name: 'uid', defaultValue: 'dailytest'),
    string(name: 'contentrepo', defaultValue: '/opt/hfrd/contentRepo')
  ]}

  def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
  def contentrepo = params.contentrepo
  def userroot = contentrepo + "/" + params.uid
  def workdir = pwd()
  def initdir = userroot + "/initdir"
  sh """
    echo "Copy kubeconfig file, netspec and test plan to the working directory"
    cp -r $initdir $workdir
  """

  def buildResult = null
  def serverId = ""
  def clientId = ""

  stage("Network setup") {
    if (fileExists(initdir + "/kubeconfigserver.zip") &&
        fileExists(initdir + "/networkspec.yml"))
    {
      println("Found networkspec.yml and kubeconfigserver.zip file, will setup network")
      testid =  UUID.randomUUID().toString().substring(0,8) + "-n"
      sh """
        echo "${testid}"
        mkdir -p "${contentrepo}/$uid/$testid"
        cp "${initdir}/kubeconfigserver.zip" "${userroot}/$testid/kubeconfig.zip"
        cp "${initdir}/networkspec.yml" "${userroot}/$testid/networkspec.yml"
      """
      try {
        buildResult = build(job: 'k8snetwork', wait: true, propagate: false,
          parameters: [
            [$class:"StringParameterValue", name: "coderoot",
             value: "/var/jenkins_home/src"],
            [$class:"StringParameterValue", name: "requestid",
             value: testid],
            [$class:"StringParameterValue", name: "contentrepo",
             value: params.contentrepo],
            [$class:"StringParameterValue", name: "uid",
             value: params.uid],
            [$class:"StringParameterValue", name: "action",
             value: "create"]])
        if (fileExists(userroot+"/"+testid+"/certs.tgz")) {
          println("Save the certs file to the init directory")
          sh """
            cp "${userroot}/${testid}/certs.tgz" "${initdir}/allcerts.tgz"
          """
        }
        createQueueIdFile("k8snetwork", buildResult.getId(), userroot+"/"+testid+"/queueid")
        if (buildResult.getResult() != "SUCCESS") {
          currentBuild.result = "FAILURE"
        } else {
          println("Network setup succeeded!")
        }
        serverId = testid
      }
      catch (Exception e) {
        createQueueIdFile("k8snetwork", buildResult.getId(), userroot+"/"+testid+"/queueid")
        println("Fabric network setup failed !")
      }
    }
  }

  def testfiles = null
  def testids = []
  stage("Run tests") {
    if (buildResult != null && buildResult.getResult() == "SUCCESS" &&
      fileExists(initdir + "/kubeconfigclient.zip")) {
      testfiles = findFiles(glob: '*initdir/testplan*.yml').toSorted()
      action = "create"
      testid = ""
      try {
        testfiles.find {
          println("Found test plan file " + it.name)
          testid =  UUID.randomUUID().toString().substring(0,8) + "-t"
          testplanname = it.name
          targetpath = getCurrentTime() + "." + testplanname
          testids.add([testid:testid, target:targetpath])
          println("The test id is " + testid)
          sh """
            mkdir -p "${userroot}/${testid}"
            cp "${initdir}/kubeconfigclient.zip" "${userroot}/${testid}/kubeconfig.zip"
            cp "${initdir}/${testplanname}" "${userroot}/${testid}/testplan.yml"
            cp "${initdir}/allcerts.tgz" "${userroot}/${testid}/allcerts.tgz"
          """
          if (fileExists(initdir + "/chaincode.tgz")) {
            sh """
              cp "${initdir}/chaincode.tgz" "${userroot}/${testid}/chaincode.tgz"
            """
          }

          buildResult = build(job: 'moduletest', wait: true, propagate: false,
            parameters: [
              [$class:"StringParameterValue", name: "coderoot",
               value: "/var/jenkins_home/src"],
              [$class:"StringParameterValue", name: "requestid",
               value: testid],
              [$class:"StringParameterValue", name: "contentrepo",
               value: params.contentrepo],
              [$class:"StringParameterValue", name: "uid",
               value: params.uid],
              [$class:"StringParameterValue", name: "action",
               value: action]])
          if (action == "create") {
              action = testid
          }
          clientId = testid
          createQueueIdFile("moduletest", buildResult.getId(), userroot+"/"+testid+"/queueid")
          if (buildResult.getResult() != "SUCCESS") {
            currentBuild.result = "FAILURE"
            return
          }
        }
      } catch (Exception e) {
        createQueueIdFile("moduletest", buildResult.getId(), userroot+"/"+testid+"/queueid")
        println("Fabric test failed !")
        currentBuild.result = "FAILURE"
        return
      }
    }
    println("Tests finished")
  }

  stage("Check bnd report") {
    if (fileExists(initdir + "/kubeconfigserver.zip"))
    {
      println("Found kubeconfigserver.zip file, will check if bnd is enabled")
      testid =  UUID.randomUUID().toString().substring(0,8) + "-bnd"

      targetpath = getCurrentTime() + ".bndresults"
      testids.add([testid:testid, target:targetpath])

      sh """
        echo "${testid}"
        mkdir -p "${contentrepo}/$uid/$testid"
        cp "${initdir}/kubeconfigserver.zip" "${userroot}/$testid/kubeconfig.zip"
      """
      try {
        buildResult = build(job: 'moduletest', wait: true, propagate: false,
          parameters: [
            [$class:"StringParameterValue", name: "coderoot",
             value: "/var/jenkins_home/src"],
            [$class:"StringParameterValue", name: "requestid",
             value: testid],
            [$class:"StringParameterValue", name: "contentrepo",
             value: params.contentrepo],
            [$class:"StringParameterValue", name: "uid",
             value: params.uid],
            [$class:"StringParameterValue", name: "action",
             value: "bndresults"]])
      } catch (Exception e) {
        createQueueIdFile("moduletest", buildResult.getId(), userroot+"/"+testid+"/queueid")
        println("BND reporting generation failed !")
        currentBuild.result = "FAILURE"
      }
    }
  }

  stage("Clean up k8s cluster") {
    if (serverId != "" || clientId != "") {
      println("Cleaning up the cluster...")
      getScript(workdir, "setup/cleank8s.sh", scmUrl)
      if (serverId != "") {
        runScript(userroot + "/" + serverId + "/vars", workdir + "/cleank8s.sh")
        println("Clean up network files on HFRD server.")
        sh """
          rm -rf "${userroot}/${serverId}"
        """
      }
      if (clientId != "") {
        runScript(userroot + "/" + clientId + "/vars", workdir + "/cleank8s.sh")
      }
    }
  }

  stage("Save results") {
    println("Save the test results...")
    testids.find {
      testid = it.testid
      println("Saving test " + testid + " results and cleaning up...")
      targetdir = userroot+"/testresults/"+it.target
      sourceroot = userroot+"/"+testid
      sh """
        mkdir -p "${targetdir}"
        cp -r "${sourceroot}/data.tgz" "${targetdir}" 2>/dev/null || :
        cp -r "${sourceroot}/metrics" "${targetdir}" 2>/dev/null || :
        cp -r "${sourceroot}/logs" "${targetdir}" 2>/dev/null || :
        cp -r "${sourceroot}/testplan.yml" "${targetdir}" 2>/dev/null || :
        cp -r "${userroot}/initdir/networkspec.yml" "${targetdir}"
        rm -rf "${sourceroot}"
      """
    }
  }
}
