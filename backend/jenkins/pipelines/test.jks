node('minion') {
  def ROOTDIR = pwd()
  def imagename = 'runnerbox_alpine'

  parameters {[
    string(name: 'testconfig', defaultValue: '{}')
  ]}

  def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()

  def handler = ''
  def hasImage = sh(returnStdout: true,
    script: 'docker images -q ' + imagename + ':latest 2> /dev/null')

  if (hasImage == '') {
    git changelog: false, poll: false, credentialsId: "githubsshkey", url: scmUrl
    handler = load("backend/jenkins/pipelines/common/utils.groovy")
    handler.prepareImage(imagename)
  }
  sh '''
    pwd
    ls -ltr
    rm -rf workdir
    mkdir -p workdir/results
  '''

  def testconfig = readJSON text: params.testconfig

  def cmd = 'docker run --rm -v ' + ROOTDIR + '/workdir:/opt/fabrictest '
  cmd += imagename + ' cp -r /opt/src /opt/fabrictest/src'
  sh(returnStatus: false, script: cmd)

  if (handler == '') {
    handler = load("workdir/src/common/utils.groovy")
  }

  dir('workdir') {
    if (testconfig.sslcerts == false) {
    sh 'curl -sSL -k -o tests.tar.gz ' + testconfig.url
    sh 'tar -zxf tests.tar.gz'
    }
    else {
    sh 'curl -sSL -o tests.tar.gz ' + testconfig.url
    sh 'tar -zxf tests.tar.gz'
    }
  }

  cmd = 'docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v '
  cmd += ROOTDIR + '/workdir:/opt/fabrictest -e ROOTDIR=' + ROOTDIR + ' '
  cmd += imagename + ' /opt/fabrictest/' + testconfig.startcmd
  def result = sh(returnStatus: true, script: cmd)

  result = (result==0)?'SUCCESS':'FAIL'
  def variables = [status: result, items: []]

  content = handler.renderTemplate(ROOTDIR + "/workdir/src/templates/jobStatus.tpl",
    variables)
  writeFile file: "workdir/results/jobStatus.json", text: content

  sh 'tar -cvf workdir/results/package.tar workdir/results'

  archiveArtifacts artifacts: 'workdir/results/**/*'
}
