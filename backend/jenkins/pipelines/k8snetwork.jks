node {
  def ROOTDIR = pwd()
  sh 'sudo rm -rf ansible/vars'
  deleteDir()
  sh 'mkdir -p ' + ROOTDIR

  parameters {[
    string(name: 'coderoot', defaultValue: '/var/jenkins_home/src'),
    string(name: 'requestid', defaultValue: ''),
    string(name: 'uid', defaultValue: ''),
    string(name: 'contentrepo', defaultValue: '/opt/hfrd/contentRepo'),
    string(name: 'action', defaultValue: 'create')
  ]}

  def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
  def coderoot = params.coderoot
  def resultdest = params.contentrepo + '/' + params.uid + '/' + params.requestid

  stage("Get cello code") {
    dir(ROOTDIR) {
      if ( fileExists(coderoot + "/cello/src/agent/ansible")) {
        sh """
          echo "Get cello code from the local location"
          cp -r ${coderoot}/cello/src/agent/ansible .
        """
      }
      else {
        dir(coderoot) {
          sh """
            git init cello
            cd cello
            git remote add origin https://github.com/hyperledger/cello.git
            git config core.sparsecheckout true
            echo src/agent/ansible/* >> .git/info/sparse-checkout
            git pull --depth=1 origin master
            rm -rf src/agent/ansible/vars/*
            cp -r src/agent/ansible ${ROOTDIR}
          """
        }
      }
    }
  }

  stage("Get hfrd code") {
    dir(ROOTDIR) {
      if ( fileExists(coderoot + "/hfrd/backend/jenkins/pipelines/ansible")) {
        sh """
          echo "Get hfrd code from the local location"
          cp -r ${coderoot}/hfrd/backend/jenkins/pipelines/ansible .
        """
      }
      else {
        dir(coderoot) {
          sh """
            git init hfrd
            cd hfrd
            git remote add origin ${scmUrl}
            git config core.sparsecheckout true
            echo backend/jenkins/pipelines/ansible/* >> .git/info/sparse-checkout
            git pull --depth=1 origin master
            cp -r backend/jenkins/pipelines/ansible ${ROOTDIR}
          """
        }
      }
    }
  }

  stage("Generate fabric config file") {
    if (params.action == 'create') {
      dir(ROOTDIR+"/ansible") {
        ansiblePlaybook inventory: 'hosts',
          extras: '-e "reqId=' + params.requestid +' uid=' + params.uid + ' contentrepo=' + params.contentrepo + '"',
          playbook: 'prepare.yml',
          sudoUser: null
      }
    }
  }

  stage("Fabric network") {
    dir(ROOTDIR+"/ansible") {
      if (params.action == 'create') {
        def err = ""
        try {
          ansiblePlaybook inventory: 'hosts',
            extras: '-e "mode=apply env=fabricspec deploy_type=k8s"',
            playbook: 'setupfabric.yml',
            skippedTags: 'composersetup',
            sudoUser: null
        } catch (Exception error) {
          err = error
        } finally {
          sh """
            cp -r vars ${resultdest}
            cp vars/fabricspec/fabric/certs.tgz ${resultdest}
            tar zxf ${resultdest}/certs.tgz -C ${resultdest}/
            python utils/testplan_gen.py ${resultdest} cello
            rm -rf ${resultdest}/keyfiles
          """
          if (err != "") {
            throw err
          }
        }
      }
      else {
        if (fileExists("${resultdest}/vars")) {
          sh """
            cp -r ${resultdest}/vars/* vars
          """
          ansiblePlaybook inventory: 'hosts',
            extras: '-e "mode=destroy env=fabricspec deploy_type=k8s"',
            playbook: 'setupfabric.yml',
            skippedTags: 'composersetup',
            sudoUser: null
        }
        sh """
          sudo rm -rf ${resultdest}
        """
      }
    }
  }

}
