node {
  def ROOTDIR = pwd()
  def hostjenkins = System.getenv("HOST_JENKINS")
  def values = ROOTDIR.split('/')
  hostjenkins = hostjenkins + '/workspace/' + values[values.length - 1]
  print hostjenkins

  parameters {[
    string(name: 'requestid', defaultValue: ''),
    string(name: 'uid', defaultValue: ''),
    string(name: 'contentrepo', defaultvalue: '/opt/hfrd/contentRepo'),
    string(name: 'service_config', defaultValue: 'service_config.json')
  ]}
  println 'Received parameters are uid:' + uid + ' requestid:' + requestid + ' contentrepo:' + contentrepo +' service_config:' + service_config   
  
  def networkfilepath= contentrepo +'/' + uid +'/'+requestid +'/'+ service_config 
  println 'network config file path:' +networkfilepath
  def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()

  def imagename = 'bxbox_alpine'
  
  scriptname = ' /opt/src/scripts/ibpcertsGet.sh'

  def handler = ''
  println 'check docker images  ' 
  def hasImage = sh(returnStdout: true,
    script: 'docker images -q ' + imagename + ':latest 2> /dev/null')

  sh """
     rm -rf hfrd backend
     rm -rf workdir
     git clone -b master --single-branch ${scmUrl}
     cp -rf hfrd/backend $ROOTDIR
     mkdir -p workdir
     cp -rf hfrd/backend/jenkins/pipelines $ROOTDIR/workdir/src
     mkdir -p workdir/input
     cp $networkfilepath $ROOTDIR/workdir/input
  """

  if (hasImage == '') {
    sh "chmod +x backend/jenkins/pipelines/scripts/*"
    handler = load("backend/jenkins/pipelines/common/utils.groovy")
    handler.prepareImage(imagename)
  }

  println 'prepare docker env  ' 

  cmd = 'docker run --rm -v '
  cmd += hostjenkins + '/workdir:/opt/fabrictest ' + imagename + scriptname + ' /opt/fabrictest/input/' + service_config
  def result = sh(returnStatus: true, script: cmd)

  result = (result==0)?'SUCCESS':'FAIL'
  def jobpath = '/job/'+env.JOB_NAME+'/'+env.BUILD_NUMBER+'/artifact/' 
  
  if (result == 'SUCCESS') {
    variables = [status: result, items: [
               ['network', jobpath+'workdir/results/network.json'],
               ['certs', jobpath+'workdir/results/ibpcerts.tar.gz']]]
    
      def networkExists = fileExists "workdir/results/network.json"
      def certsExists = fileExists "workdir/results/ibpcerts.tar.gz"
      def network_id
      if (networkExists && certsExists) {
        def network = readJSON file: "workdir/results/network.json"
        for (entry in network) {
          if (entry.value.network_id) {
            network_id = entry.value.network_id
            println "network id is " + network_id
            break
          }
        }
      } else {
        println "network.json or ibpcerts.tar.gz does not exist"
      }
      if (network_id?.trim() && uid?.trim()) {
        sh """
          mkdir -p ${contentrepo}/${uid}/${requestid}
          cp workdir/results/ibpcerts.tar.gz ${contentrepo}/${uid}/${requestid}
          tar zxf workdir/results/ibpcerts.tar.gz -C ${contentrepo}/${uid}/${requestid}/
          cd workdir/src/ansible
          python utils/testplan_gen.py ${contentrepo}/${uid}/${requestid} ibp ${network_id}
          rm -rf ${contentrepo}/${uid}/${requestid}/keyfiles
        """
      } else {
        println "no network id found"
      }

  }
  if (result == 'SUCCESS' && params.method != 'DELETE') {
    sh 'tar -cvf workdir/results/package.tar workdir/results'
  }
  if (handler == '') {
    handler = load("workdir/src/common/utils.groovy")
  }
  variables = [status: result, items: [
               ['network', jobpath+'workdir/results/network.json'],
               ['package', jobpath+'workdir/results/package.tar']]]
  content = handler.renderTemplate(ROOTDIR + "/workdir/src/templates/jobStatus.tpl",
    variables)
  writeFile file: "workdir/results/jobStatus.json", text: content 
  
  archiveArtifacts artifacts: 'workdir/results/**/*'
}
