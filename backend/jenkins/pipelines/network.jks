node {
  def ROOTDIR = pwd()
  def hostjenkins = System.getenv("HOST_JENKINS")
  def values = ROOTDIR.split('/')
  hostjenkins = hostjenkins + '/workspace/' + values[values.length - 1]
  print hostjenkins
  parameters {[
    string(name: 'method', defaultValue: ''),
    string(name: 'serviceid', defaultValue: ''),
    string(name: 'env', defaultValue: 'bxstaging'),
    string(name: 'loc', defaultValue: 'ASH-CI'),
    string(name: 'contentrepo', defaultvalue: '/opt/hfrd/contentRepo'),
    string(name: 'uid', defaultvalue: '')
  ]}

  def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()

  def imagename = 'bxbox_alpine'
  def scriptname = ''
  def serviceid = ''
  if (params.method in ['POST','DELETE','GET']) {
      scriptname = ' /opt/src/scripts/network' + params.method.toLowerCase().capitalize() + '.sh'
      if (params.method == 'POST' && params.serviceid == '') {
        serviceid = UUID.randomUUID().toString().replaceAll('-','')
      }
      else {
        serviceid = params.serviceid
      }
  }

  println 'Received parameters are method:' + method + ' serviceid:' + serviceid + ' env:' + params.env  
  if (serviceid == '') {
    return
  }

  def handler = ''
  def hasImage = sh(returnStdout: true,
    script: 'docker images -q ' + imagename + ':latest 2> /dev/null')

  sh """
     rm -rf hfrd backend
     rm -rf workdir
     git clone -b master --single-branch ${scmUrl}
     cp -rf hfrd/backend $ROOTDIR
     mkdir -p workdir
     cp -rf hfrd/backend/jenkins/pipelines $ROOTDIR/workdir/src
  """

  if (hasImage == '') {
    sh "chmod +x backend/jenkins/pipelines/scripts/*"
    handler = load("backend/jenkins/pipelines/common/utils.groovy")
    handler.prepareImage(imagename)
  }

  configFileProvider([configFile(fileId: params.env, targetLocation: 'run/bxconfig.yml')]) {}
  def bxconfig = readYaml file: 'run/bxconfig.yml'
  bxconfig.serviceid = serviceid
  bxconfig.servicekey = serviceid + '-key'
  bxconfig.env = params.env
  bxconfig.loc = params.loc

  if (params.loc) {
    bxconfig.loc = params.loc
  }
  if (params.numOfOrgs) {
    bxconfig.numOfOrgs = params.numOfOrgs
  }
  if (params.numOfPeers) {
    bxconfig.numOfPeers = params.numOfPeers
  }
  if (params.ledgerType) {
    bxconfig.ledgerType = params.ledgerType
  }

  if (handler == '') {
    handler = load("workdir/src/common/utils.groovy")
  }

  def variables = ["bxc": bxconfig]
  def content = handler.renderTemplate(ROOTDIR + "/workdir/src/templates/bxEnv.tpl", variables)
  writeFile file: "run/envfile", text: content
  println 'env in bxbox_alpine : ' + content
  cmd = 'docker run --env-file run/envfile --rm -v '
  cmd += hostjenkins + '/workdir:/opt/fabrictest ' + imagename + scriptname
  result = sh(returnStatus: true, script: cmd)

  result = (result==0)?'SUCCESS':'FAIL'
  def jobpath = '/job/'+env.JOB_NAME+'/'+env.BUILD_NUMBER+'/artifact/'

  switch (params.method) {
    case 'POST':
      variables = [status: result, items: [
               ['network', jobpath+'workdir/results/network.json'],
               ['certs', jobpath+'workdir/results/ibpcerts.tar.gz'],
               ['service', jobpath+'workdir/results/service.json']]]
      // workdir/results/network.json and workdir/results/ibpcerts.tar.gz should exist
      // copy ibpcerts.tar.gz to {contentRepo}/{networkId}/ibpcerts.tar.gz
      def networkExists = fileExists "workdir/results/network.json"
      def certsExists = fileExists "workdir/results/ibpcerts.tar.gz"
      def network_id
      if (networkExists && certsExists) {
        def network = readJSON file: "workdir/results/network.json"
        for (entry in network) {
          if (entry.value.network_id) {
            network_id = entry.value.network_id
            println "network id is " + network_id
            break
          }
        }
      } else {
        println "network.json or ibpcerts.tar.gz does not exist"
      }
      if (network_id?.trim() && uid?.trim()) {
        sh """
          mkdir -p ${contentrepo}/${uid}/${network_id}
          cp workdir/results/ibpcerts.tar.gz ${contentrepo}/${uid}/${network_id}
          tar zxf workdir/results/ibpcerts.tar.gz -C ${contentrepo}/${uid}/${network_id}/
          cd workdir/src/ansible
          python utils/testplan_gen.py ${contentrepo}/${uid}/${network_id} ibp ${network_id}
          rm -rf ${contentrepo}/${uid}/${network_id}/keyfiles
        """
      } else {
        println "no network id found"
      }

      break
    case 'GET':
      variables = [status: result, items: [
               ['network', jobpath+'workdir/results/network.json']]]
      break
    case 'DELETE':
      variables = [status: result, items: []]
      break
  }

  if (result == 'SUCCESS' && params.method != 'DELETE') {
    sh 'tar -cvf workdir/results/package.tar workdir/results'
  }

  content = handler.renderTemplate(ROOTDIR + "/workdir/src/templates/jobStatus.tpl",
    variables)
  writeFile file: "workdir/results/jobStatus.json", text: content 

  archiveArtifacts artifacts: 'workdir/results/**/*'
}
