node {
  def ROOTDIR = pwd()
  deleteDir()
  sh 'mkdir -p ' + ROOTDIR

  parameters {[
    string(name: 'coderoot', defaultValue: '/var/jenkins_home/src'),
    string(name: 'requestid', defaultValue: ''),
    string(name: 'uid', defaultValue: ''),
    string(name: 'contentrepo', defaultValue: '/opt/hfrd/contentRepo'),
  ]}

  def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
  def coderoot = params.coderoot
  def resultdest = params.contentrepo + '/' + params.uid + '/' + params.requestid
  def reqid = params.requestid


  stage("Get hfrd code") {
    dir(ROOTDIR) {
      if ( fileExists(coderoot + "/hfrd/backend/jenkins/pipelines/ansible")) {
        sh """
          echo "Get hfrd code from the local location"
          cp -r ${coderoot}/hfrd/backend/jenkins/pipelines/ansible .
        """
      }
      else {
        dir(coderoot) {
          sh """
            git init hfrd
            cd hfrd
            git remote add origin ${scmUrl}
            git config core.sparsecheckout true
            echo backend/jenkins/pipelines/ansible/* >> .git/info/sparse-checkout
            git pull --depth=1 origin master
            cp -r backend/jenkins/pipelines/ansible ${ROOTDIR}
          """
        }
      }
    }
  }

  stage("Add org into existing channels") {
      dir(ROOTDIR+"/ansible") {
        ansiblePlaybook inventory: 'hosts',
          extras: '-e "reqId=' + params.requestid +' uid=' + params.uid + ' orgCertsFile=' + params.orgCertsFile +
          ' orgName=' + params.orgName + ' channels=' + params.channels + ' contentrepo=' + params.contentrepo + '"',
          playbook: 'networkaddorg.yml',
          sudoUser: null
      }
  }
}
