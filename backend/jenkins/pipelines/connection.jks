node('minion') {
  def ROOTDIR = pwd()

  parameters {[
    string(name: 'serviceid', defaultValue: ''),
    string(name: 'env', defaultValue: 'bxstaging')
  ]}

  def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()

  def imagename = 'bxbox_alpine'
  def serviceid = params.serviceid

  println 'Serviceid is ' + serviceid

  scriptname = ' /opt/src/scripts/networkGet.sh'

  def handler = ''
  def hasImage = sh(returnStdout: true,
    script: 'docker images -q ' + imagename + ':latest 2> /dev/null')

  if (hasImage == '') {
    git changelog: false, poll: false, credentialsId: "githubsshkey", url: scmUrl
    sh "chmod +x backend/jenkins/pipelines/scripts/*"
    handler = load("backend/jenkins/pipelines/common/utils.groovy")
    handler.prepareImage(imagename)
  }
  sh '''
    rm -rf workdir
    mkdir -p workdir
  '''

  configFileProvider([configFile(fileId: params.env, targetLocation: 'run/bxconfig.yml')]) {}
  def bxconfig = readYaml file: 'run/bxconfig.yml'
  bxconfig.serviceid = serviceid
  bxconfig.servicekey = serviceid + '-key'

  def cmd = 'docker run --rm -v ' + ROOTDIR + '/workdir:/opt/fabrictest '
  cmd += imagename + ' cp -r /opt/src /opt/fabrictest/src'
  sh(returnStatus: false, script: cmd)

  if (handler == '') {
    handler = load("workdir/src/common/utils.groovy")
  }

  def variables = ["bxc": bxconfig]
  def content = handler.renderTemplate(ROOTDIR + "/workdir/src/templates/bxEnv.tpl",
    variables)
  writeFile file: "run/envfile", text: content 
  
  cmd = 'docker run --env-file run/envfile --rm -v '
  cmd += ROOTDIR + '/workdir:/opt/fabrictest ' + imagename + scriptname
  def result = sh(returnStatus: true, script: cmd)
    
  if (result == 0) {
    def networks = readJSON file: 'workdir/results/network.json'
    def keys = networks.keySet().toArray()

    for (int i=0; i< keys.length; i++) {
      def key = keys[i]
      println 'Getting profile for ' + key
      def network = networks[key]
      def secret = (key + ':' + network['secret']).bytes.encodeBase64().toString()
      def url = new URL(network['url']+'/api/v1/networks/'+network['network_id']+'/connection_profile')
      def profile = url.getText(requestProperties: [Authorization: 'Basic ' + secret])
      writeFile file: 'workdir/results/ConnectionProfile_'+key+'.json', text: profile
    }
    
    sh 'tar -cvf workdir/results/package.tar workdir/results'
  }
  
  def jobpath = '/job/'+env.JOB_NAME+'/'+env.BUILD_NUMBER+'/artifact/'
  result = (result==0)?'SUCCESS':'FAIL'
  
  variables = [status: result, items: [
               ['network', jobpath+'workdir/results/network.json'],
               ['package', jobpath+'workdir/results/package.tar']]]
  content = handler.renderTemplate(ROOTDIR + "/workdir/src/templates/jobStatus.tpl",
    variables)
  writeFile file: "workdir/results/jobStatus.json", text: content 
  
  archiveArtifacts artifacts: 'workdir/results/**/*'
}
