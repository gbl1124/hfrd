---
- name: Get cas
  command: >-
    kubectl --kubeconfig vars/kubeconfig --namespace {{ namespace }}
    get pods -o
    jsonpath='{range @.items[?(@.metadata.labels.component=="ca")]}{.spec.containers[?(@.name=="ca")].env[?(@.name=="PROXY_IP")].value},{@.metadata.labels.name},{@.metadata.labels.name},{@.metadata.name}{"\n"}{end}'
  register: cas_res

- name: Get orderers
  command: >-
    kubectl --kubeconfig vars/kubeconfig --namespace {{ namespace }}
    get pods -o
    jsonpath='{range @.items[?(@.metadata.labels.component=="orderer")]}{.spec.containers[?(@.name=="proxy")].env[?(@.name=="EXTERNAL_ADDRESS")].value},{@.metadata.labels.name},{@.metadata.labels.orgname},{@.metadata.name}{"\n"}{end}'
  register: orderers_res

- debug:
    var: orderers_res

- name: Get peers
  command: >-
    kubectl --kubeconfig vars/kubeconfig --namespace {{ namespace }}
    get pods -o
    jsonpath='{range @.items[?(@.metadata.labels.component=="peer")]}{.spec.containers[?(@.name=="peer")].env[?(@.name=="CORE_PEER_GOSSIP_EXTERNALENDPOINT")].value},{@.metadata.labels.name},{@.metadata.labels.orgname},{@.metadata.name}{"\n"}{end}'
  register: peers_res

- debug:
    var: peers_res

- name: make ca list
  set_fact:
    allcas: >-
      {{ allcas + [{'url': item.split(',')[0], 'name': item.split(',')[1],
         'org': item.split(',')[2], 'id': item.split(',')[3]}] }}
  with_items: "{{ cas_res.stdout_lines }}"
 
- name: make orderer list
  set_fact:
    allorderers: >-
      {{ allorderers + [{'url': item.split(',')[0], 'name': item.split(',')[1],
         'org': item.split(',')[2], 'id': item.split(',')[3]}] }}
  with_items: "{{ orderers_res.stdout_lines }}"

- name: make peer list
  set_fact:
    allpeers: >-
      {{ allpeers + [{'url': item.split(',')[0], 'name': item.split(',')[1],
         'org': item.split(',')[2], 'id': item.split(',')[3]}] }}
  with_items: "{{ peers_res.stdout_lines }}"
